{"version":3,"sources":["ParseItem.js","ParseItems.js","App.js","serviceWorker.js","index.js"],"names":["ParseItem","props","console","log","attributes","this","id","items","a","data","push","key","className","site_name","time_ago","React","Component","ParseItems","parseItems","map","p","App","getParseItems","fetch","headers","then","response","json","slice","setState","catch","er","state","to","path","Home","Aggregators","Topics","match","useRouteMatch","url","Topic","topicId","useParams","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3ddfb6d1.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class ParseItem extends React.Component {\n\n  constructor(props){\n    super(props)\n    console.log(this.props.attributes);\n  }\n\n  render() {\n    const {id, attributes} = this.props.attributes;\n    let items = [];\n    for (const a in attributes.data) {\n      items.push(<li key={a} className=\"list-group list-group-flush\">{`${a}: ${attributes.data[a]}`}</li>)\n    }  \n    return (\n      <div className = \"col-lg-6 col-md-6 col-xl-4\">\n        <div className=\"parse-item card mb-4 box-shadow h-250\">\n          <div className=\"card-header d-flex justify-content-between\">\n            {attributes.site_name}\n          </div>\n          <div className=\"card-body\">\n            <ul className=\"list-group list-group-flush\">\n              {items}\n            </ul>\n          </div>\n          <div className=\"card-footer\">\n            <small className=\"text-muted\">\n              {attributes.time_ago}\n            </small>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport ParseItem from './ParseItem';\n\nexport default class ParseItems extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"row\">\n        {this.props.parseItems.map((p) => <ParseItem key={p.id} attributes={p} />)}\n      </div>\n    );\n  }\n}","import React from 'react';\nimport './App.css';\nimport {\n  Route,\n  BrowserRouter as Router,\n  Switch,\n  useRouteMatch,\n  Link,\n  useParams\n} from 'react-router-dom';\nimport ParseItems from './ParseItems';\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      parseItems: []\n    };\n    this.getParseItems();\n  }\n\n  getParseItems = () => {\n    fetch('http://localhost:3000/api/v1/parse_items', {\n      headers: {\n        'Content-type': 'application/json',\n        'Accept': 'application/json'\n      }\n    })\n    .then(response => {\n      return response.json();\n    })\n    .then((data) => {\n      console.log(data.data.slice(0, 10));\n      this.setState({\n        parseItems: data.data.slice(0, 10),\n      });\n    })\n    .catch((er => {\n      console.log('error');\n    }))\n  }\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <nav>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/about\">About</Link>\n            </li>\n            <li>\n              <Link to=\"/aggregators\">Aggregators</Link>\n            </li>\n            <li>\n              <Link to=\"/topics\">Topics</Link>\n            </li>\n          </nav>\n        \n          <Switch>\n            <Route path=\"/about\">\n              <Home />\n            </Route>\n            <Route path=\"/aggregators\">\n              <Aggregators />\n            </Route>\n            <Route path=\"/topics\">\n              <Topics />\n            </Route>\n            <Route path=\"/\">\n              <div className=\"App\">\n                <div className=\"container h-100\">\n                  <ParseItems parseItems={this.state.parseItems} />\n                </div>\n              </div>\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n      \n      /*\n      <div className=\"App\">\n        <div className=\"container h-100\">\n          <ParseItems parseItems={this.state.parseItems} />\n        </div>\n      </div>\n      */\n    );\n  }\n}\n\n\nfunction Home() {\n  return <h2>Home</h2>\n}\n\nfunction Aggregators() {\n  return <h2>Aggregators</h2>\n} \n\nfunction Topics() {\n  let match = useRouteMatch();\n  console.log(match);\n  return (\n    <div>\n      <h2>\n        Topics\n      </h2>\n      <ul>\n        <li>\n          <Link to={`${match.url}/components`}>Components</Link>\n        </li>\n        <li><Link to={`${match.url}/props-v-state`}>Props v. State</Link></li>\n      </ul>\n      <Switch>\n        <Route path={`${match.path}/:topicId`}>\n          <Topic />\n        </Route>\n        <Route path={match.path}>\n          <h3>Please select a topic</h3>\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nfunction Topic() {\n  let { topicId } = useParams();\n  return <h3>Requested topic ID: {topicId}</h3>;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}